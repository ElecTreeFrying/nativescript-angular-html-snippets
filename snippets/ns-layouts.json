{
  "Nativescript UI Layout - Absolute Layout (default)": {
    "prefix": "ns-absolute-layout",
    "body": "<AbsoluteLayout>\n  $1\n</AbsoluteLayout>",
    "description": "The AbsoluteLayout is the simplest layout in NativeScript. It uses absolute left-top coordinates to position its children. The AbsoluteLayout will not enforce any layout constraints on its children and will not resize them at runtime when its size changes.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#absolutelayout"
  },
  "Nativescript UI Layout - Absolute Layout (snippet 1)": {
    "prefix": "ns-absolute-layout-snippet-1",
    "body": "<AbsoluteLayout width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"10, 10\" left=\"10\" top=\"10\" width=\"90\" height=\"90\" backgroundColor=\"red\"></Label>\n  <Label text=\"110, 10\" left=\"110\" top=\"10\" width=\"90\" height=\"90\" backgroundColor=\"green\"></Label>\n  <Label text=\"110, 110\" left=\"110\" top=\"110\" width=\"90\" height=\"90\" backgroundColor=\"blue\"></Label>\n  <Label text=\"10, 110\" left=\"10\" top=\"110\" width=\"90\" height=\"90\" backgroundColor=\"yellow\"></Label>\n</AbsoluteLayout>",
    "description": "The AbsoluteLayout is the simplest layout in NativeScript. It uses absolute left-top coordinates to position its children. The AbsoluteLayout will not enforce any layout constraints on its children and will not resize them at runtime when its size changes.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#absolutelayout"
  },
  "Nativescript UI Layout - Absolute Layout (snippet 2)": {
    "prefix": "ns-absolute-layout-snippet-2",
    "body": "<AbsoluteLayout width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"no margin\" left=\"10\" top=\"10\" width=\"100\" height=\"100\" backgroundColor=\"red\"></Label>\n  <Label text=\"margin=`30`\" left=\"10\" top=\"10\" margin=\"30\" width=\"100\" height=\"90\" backgroundColor=\"green\"></Label>\n</AbsoluteLayout>",
    "description": "The AbsoluteLayout is the simplest layout in NativeScript. It uses absolute left-top coordinates to position its children. The AbsoluteLayout will not enforce any layout constraints on its children and will not resize them at runtime when its size changes.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#absolutelayout"
  },
  "Nativescript UI Layout - Absolute Layout (complete)": {
    "prefix": "ns-absolute-layout-comp",
    "body": "<AbsoluteLayout>\n  $1\n</AbsoluteLayout>\n<!--\nAbsoluteLayout Properties\nNone.\n\nAbsoluteLayout Child Properties\nPROPERTY\tDESCRIPTION\nleft\t    Gets or sets the distance, in pixels, between the left edge of the child and the left edge of its parent AbsoluteLayout client area.\ntop\t      Gets or sets the distance, in pixels, between the top edge of the child and the top edge of its parent AbsoluteLayout client area.\n-->",
    "description": "The AbsoluteLayout is the simplest layout in NativeScript. It uses absolute left-top coordinates to position its children. The AbsoluteLayout will not enforce any layout constraints on its children and will not resize them at runtime when its size changes.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#absolutelayout"
  },
  "Nativescript UI Layout - Dock Layout (default)": {
    "prefix": "ns-dock-layout",
    "body": "<DockLayout>\n   $1\n</DockLayout>",
    "description": "The DockLayout is a layout that provides a docking mechanism for child elements to the left, right, top, bottom or center of the layout. To define the docking side of a child element, use its dock property. To dock a child element to the center of the DockLayout, it must be the last child of the DockLayout and the stretchLastChild property of the DockLayout must be set to true.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#docklayout"
  },
  "Nativescript UI Layout - Dock Layout (snippet 1)": {
    "prefix": "ns-dock-layout-snippet-1",
    "body": "<DockLayout width=\"210\" height=\"210\" backgroundColor=\"lightgray\" stretchLastChild=\"false\">\n  <Label text=\"left\" dock=\"left\" width=\"60\" backgroundColor=\"red\"></Label>\n  <Label text=\"top\" dock=\"top\" height=\"60\" backgroundColor=\"green\"></Label>\n  <Label text=\"right\" dock=\"right\" width=\"60\" backgroundColor=\"blue\"></Label>\n  <Label text=\"bottom\" dock=\"bottom\" height=\"60\" backgroundColor=\"yellow\"></Label>\n</DockLayout>",
    "description": "The DockLayout is a layout that provides a docking mechanism for child elements to the left, right, top, bottom or center of the layout. To define the docking side of a child element, use its dock property. To dock a child element to the center of the DockLayout, it must be the last child of the DockLayout and the stretchLastChild property of the DockLayout must be set to true.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#docklayout"
  },
  "Nativescript UI Layout - Dock Layout (snippet 2)": {
    "prefix": "ns-dock-layout-snippet-2",
    "body": "<DockLayout width=\"210\" height=\"210\" backgroundColor=\"lightgray\" stretchLastChild=\"true\">\n  <Label text=\"left\" dock=\"left\" backgroundColor=\"red\"></Label>\n  <Label text=\"top\" dock=\"top\" backgroundColor=\"green\"></Label>\n  <Label text=\"right\" dock=\"right\" backgroundColor=\"blue\"></Label>\n  <Label text=\"bottom\" dock=\"bottom\" backgroundColor=\"yellow\"></Label>\n</DockLayout>",
    "description": "The DockLayout is a layout that provides a docking mechanism for child elements to the left, right, top, bottom or center of the layout. To define the docking side of a child element, use its dock property. To dock a child element to the center of the DockLayout, it must be the last child of the DockLayout and the stretchLastChild property of the DockLayout must be set to true.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#docklayout"
  },
  "Nativescript UI Layout - Dock Layout (snippet 3)": {
    "prefix": "ns-dock-layout-snippet-3",
    "body": "<DockLayout width=\"210\" height=\"210\" backgroundColor=\"lightgray\" stretchLastChild=\"true\">\n  <Label text=\"left1\" dock=\"left\" backgroundColor=\"red\"></Label>\n  <Label text=\"left2\" dock=\"left\" backgroundColor=\"green\"></Label>\n  <Label text=\"left3\" dock=\"left\" backgroundColor=\"blue\"></Label>\n  <Label text=\"last child\" backgroundColor=\"yellow\"></Label>\n</DockLayout>",
    "description": "The DockLayout is a layout that provides a docking mechanism for child elements to the left, right, top, bottom or center of the layout. To define the docking side of a child element, use its dock property. To dock a child element to the center of the DockLayout, it must be the last child of the DockLayout and the stretchLastChild property of the DockLayout must be set to true.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#docklayout"
  },
  "Nativescript UI Layout - Dock Layout (complete)": {
    "prefix": "ns-dock-layout-comp",
    "body": "<DockLayout>\n  $1\n</DockLayout>\n<!--\nDockLayout Properties\nPROPERTY\t        DESCRIPTION\nstretchLastChild\tGets or sets a value that indicates whether the last child element within a DockLayout stretches to fill the remaining available space. The default value is true.\n\nDockLayout Child Properties\nPROPERTY\tDESCRIPTION\ndock\t    Specifies the Dock position of a child element that is inside a DockLayout. Possible values are left, top, right and bottom.\n -->",
    "description": "The DockLayout is a layout that provides a docking mechanism for child elements to the left, right, top, bottom or center of the layout. To define the docking side of a child element, use its dock property. To dock a child element to the center of the DockLayout, it must be the last child of the DockLayout and the stretchLastChild property of the DockLayout must be set to true.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#docklayout"
  },
  "Nativescript UI Layout - Grid Layout (default)": {
    "prefix": "ns-grid-layout",
    "body": "<GridLayout>\n  $1\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 1)": {
    "prefix": "ns-grid-layout-snippet-1",
    "body": "<GridLayout columns=\"50, auto, *\" rows=\"50, auto, *\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" row=\"0\" col=\"0\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" row=\"0\" col=\"1\" colSpan=\"2\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" row=\"1\" col=\"0\" rowSpan=\"2\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" row=\"1\" col=\"1\" backgroundColor=\"yellow\"></Label>\n  <Label text=\"Label 5\" row=\"1\" col=\"2\" backgroundColor=\"orange\"></Label>\n  <Label text=\"Label 6\" row=\"2\" col=\"1\" backgroundColor=\"pink\"></Label>\n  <Label text=\"Label 7\" row=\"2\" col=\"2\" backgroundColor=\"purple\"></Label>\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 2)": {
    "prefix": "ns-grid-layout-snippet-2",
    "body": "<GridLayout columns=\"*,2*\" rows=\"2*,3*\" width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" col=\"0\" row=\"0\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" col=\"1\" row=\"0\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" col=\"0\" row=\"1\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" col=\"1\" row=\"1\" backgroundColor=\"yellow\"></Label>\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 3)": {
    "prefix": "ns-grid-layout-snippet-3",
    "body": "<GridLayout columns=\"100,auto\" rows=\"100,auto\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" col=\"0\" row=\"0\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" col=\"1\" row=\"0\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" col=\"0\" row=\"1\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" col=\"1\" row=\"1\" backgroundColor=\"yellow\"></Label>\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 4)": {
    "prefix": "ns-grid-layout-snippet-4",
    "body": "<StackLayout width=\"200\" height=\"200\" backgroundColor=\"palegreen\">\n  <GridLayout columns=\"*,2*\" horizontalAlignment=\"left\" verticalAlignment=\"top\" backgroundColor=\"lightgray\">\n    <Label text=\"Label 1\" col=\"0\" backgroundColor=\"red\"></Label>\n    <Label text=\"Label 2\" col=\"1\" backgroundColor=\"green\"></Label>\n  </GridLayout>\n</StackLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 5)": {
    "prefix": "ns-grid-layout-snippet-5",
    "body": "<GridLayout columns=\"auto,100\" rows=\"auto,auto\" width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" col=\"0\" row=\"0\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" col=\"1\" row=\"0\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"150\" col=\"0\" row=\"1\" backgroundColor=\"blue\"></Label>\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (snippet 6)": {
    "prefix": "ns-grid-layout-snippet-6",
    "body": "<GridLayout columns=\"auto, *, auto\" rows=\"auto, 25\" verticalAlignment=\"top\" backgroundColor=\"lightgray\">\n  <Image src=\"~/cute.jpg\" rowSpan=\"2\" width=\"72\" height=\"72\" margin=\"3\" verticalAlignment=\"top\"></Image>\n  <Label text=\"My cat loves the camera\" textWrap=\"true\" col=\"1\" colSpan=\"2\" minHeight=\"50\" fontSize=\"20\" margin=\"3\"></Label>\n  <Label text=\"John Smith\" col=\"1\" row=\"1\" fontSize=\"14\" horizontalAlignment=\"left\" verticalAlignment=\"bottom\" margin=\"3\"></Label>\n  <Label text=\"comments: 26\" col=\"2\" row=\"1\" color=\"#10C2B0\" fontSize=\"14\" verticalAlignment=\"bottom\" margin=\"3\"></Label>\n</GridLayout>",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Grid Layout (complete)": {
    "prefix": "ns-grid-layout-comp",
    "body": "<GridLayout>\n  $1\n</GridLayout>\n<!--\nGridLayout Properties\nPROPERTY\t DESCRIPTION\ncolumns\t   A string value representing column widths delimited with commas. Column widths can be either an absolute number, auto or *. A number indicates an absolute column width, auto makes the column as wide as its widest child, and * makes the column occupy all available horizontal space.\nrows\t     A string value representing row heights delimited with commas. Row heights can be either an absolute number, auto or *. A number indicates an absolute row height, auto makes the row as high as its highest child, and * makes the row occupy all available vertical space.\n\nGridLayout Child Properties\nPROPERTY\tDESCRIPTION\nrow\t      Gets or sets a value that indicates which row child content within a GridLayout it should appear in.\ncol\t      Gets or sets a value that indicates which column child content within a GridLayout it should appear in.\nrowSpan\t  Gets or sets a value that indicates the total number of rows that child content spans within a GridLayout.\ncolSpan\t  Gets or sets a value that indicates the total number of columns that child content spans within a GridLayout.\n-->",
    "description": "The GridLayout is a layout that arranges its child elements in a table structure of rows and columns. A cell can contain multiple child elements, they can span over multiple rows and columns, and even overlap each other. The GridLayout has one column and one row by default. To add additional columns and rows, you have to specify column definition items (separated by commas) to the columns property and row definition items (separated by commas) to the rows property of the GridLayout. The width of a column and the height of a row can be specified as an absolute amount of pixels, as a percentage of the available space or automatically:\n\nAbsolute: Fixed size of pixels.\nStar (*): Takes as much space as available (after filling all auto and fixed sized columns), proportionally divided over all star-sized columns. So 3/7 means the same as 30/70.\nAuto: Takes as much space as needed by the contained child element(s).\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#gridlayout"
  },
  "Nativescript UI Layout - Stack Layout (default)": {
    "prefix": "ns-stack-layout",
    "body": "<StackLayout>\n  $1\n</StackLayout>",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Stack Layout (snippet 1)": {
    "prefix": "ns-stack-layout-snippet-1",
    "body": "<StackLayout orientation=\"vertical\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"50\" height=\"50\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"50\" height=\"50\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"50\" height=\"50\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"50\" height=\"50\" backgroundColor=\"yellow\"></Label>\n</StackLayout>",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Stack Layout (snippet 2)": {
    "prefix": "ns-stack-layout-snippet-2",
    "body": "<StackLayout orientation=\"vertical\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"50\" height=\"50\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"50\" height=\"50\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"50\" height=\"50\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"50\" height=\"50\" backgroundColor=\"yellow\"></Label>\n</StackLayout>",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Stack Layout (snippet 3)": {
    "prefix": "ns-stack-layout-snippet-3",
    "body": "<StackLayout orientation=\"vertical\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" horizontalAlignment=\"left\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" horizontalAlignment=\"center\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" horizontalAlignment=\"right\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" horizontalAlignment=\"stretch\" backgroundColor=\"yellow\"></Label>\n</StackLayout>",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Stack Layout (snippet 4)": {
    "prefix": "ns-stack-layout-snippet-4",
    "body": "<StackLayout orientation=\"horizontal\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" verticalAlignment=\"top\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" verticalAlignment=\"center\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" verticalAlignment=\"bottom\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" verticalAlignment=\"stretch\" backgroundColor=\"yellow\"></Label>\n</StackLayout>",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Stack Layout (complete)": {
    "prefix": "ns-stack-layout-comp",
    "body": "<StackLayout>\n  $1\n</StackLayout>\n<!--\nStackLayout Properties\nPROPERTY\t   DESCRIPTION\norientation\t Gets or sets a value indicating whether the child items should be stacked in the horizontal or vertical direction. Possible values are vertical and horizontal. The default value is vertical.\n\nStackLayout Child Properties\nNone.\n-->",
    "description": "The StackLayout stacks its child elements below or beside each other, depending on its orientation. It is very useful to create lists.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#stacklayout"
  },
  "Nativescript UI Layout - Wrap Layout (default)": {
    "prefix": "ns-wrap-layout",
    "body": "<WrapLayout>\n  $1\n</WrapLayout>",
    "description": "The WrapLayout is similar to the StackLayout, but it does not just stack all child elements to one column/row, it wraps them to new columns/rows if no space is left. The WrapLayout is often used with items of the same size, but this is not a requirement.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#wraplayout"
  },
  "Nativescript UI Layout - Wrap Layout (snippet 1)": {
    "prefix": "ns-wrap-layout-snippet-1",
    "body": "<WrapLayout orientation=\"horizontal\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</WrapLayout>",
    "description": "The WrapLayout is similar to the StackLayout, but it does not just stack all child elements to one column/row, it wraps them to new columns/rows if no space is left. The WrapLayout is often used with items of the same size, but this is not a requirement.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#wraplayout"
  },
  "Nativescript UI Layout - Wrap Layout (snippet 2)": {
    "prefix": "ns-wrap-layout-snippet-2",
    "body": "<WrapLayout orientation=\"vertical\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</WrapLayout>",
    "description": "The WrapLayout is similar to the StackLayout, but it does not just stack all child elements to one column/row, it wraps them to new columns/rows if no space is left. The WrapLayout is often used with items of the same size, but this is not a requirement.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#wraplayout"
  },
  "Nativescript UI Layout - Wrap Layout (snippet 3)": {
    "prefix": "ns-wrap-layout-snippet-3",
    "body": "<WrapLayout itemWidth=\"30\" itemHeight=\"30\" width=\"210\" height=\"210\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</WrapLayout>",
    "description": "The WrapLayout is similar to the StackLayout, but it does not just stack all child elements to one column/row, it wraps them to new columns/rows if no space is left. The WrapLayout is often used with items of the same size, but this is not a requirement.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#wraplayout"
  },
  "Nativescript UI Layout - Wrap Layout (complete)": {
    "prefix": "ns-wrap-layout-comp",
    "body": "<WrapLayout>\n  $1\n</WrapLayout>\n<!--\nWrapLayout Properties\nPROPERTY\t   DESCRIPTION\norientation\t Gets or sets a value indicating the flow direction. If orientation is horizontal, items are arranged in rows. If orientation is vertical, items are arranged in columns. The default value is horizontal.\nitemWidth\t   Gets or sets the width used to measure and layout each child. Default value is Number.NaN, which does not restrict children.\nitemHeight\t Gets or sets the height used to measure and layout each child. Default value is Number.NaN, which does not restrict children.\n\nWrapLayout Child Properties\nNone.\n-->",
    "description": "The WrapLayout is similar to the StackLayout, but it does not just stack all child elements to one column/row, it wraps them to new columns/rows if no space is left. The WrapLayout is often used with items of the same size, but this is not a requirement.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#wraplayout"
  },
  "Nativescript UI Layout - Flexbox Layout (default)": {
    "prefix": "ns-flexbox-layout",
    "body": "<FlexboxLayout>\n  $1\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 1)": {
    "prefix": "ns-flexbox-layout-snippet-1",
    "body": "<FlexboxLayout width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 2)": {
    "prefix": "ns-flexbox-layout-snippet-2",
    "body": "<FlexboxLayout flexDirection=\"column\" width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 3)": {
    "prefix": "ns-flexbox-layout-snippet-3",
    "body": "<FlexboxLayout alignItems=\"flex-start\" width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 4)": {
    "prefix": "ns-flexbox-layout-snippet-4",
    "body": "<FlexboxLayout alignItems=\"flex-start\" width=\"300\" height=\"300\" backgroundColor=\"lightgray\">\n  <Label order=\"3\" text=\"Label 1\" width=\"70\" height=\"70\" backgroundColor=\"red\"></Label>\n  <Label order=\"4\" text=\"Label 2\" width=\"70\" height=\"70\" backgroundColor=\"green\"></Label>\n  <Label order=\"2\" text=\"Label 3\" width=\"70\" height=\"70\" backgroundColor=\"blue\"></Label>\n  <Label order=\"1\" text=\"Label 4\" width=\"70\" height=\"70\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 5)": {
    "prefix": "ns-flexbox-layout-snippet-5",
    "body": "<FlexboxLayout flexWrap=\"wrap\" height=\"300\" width=\"300\" backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"100\" height=\"50\" backgroundColor=\"red\"></Label>\n  <Label text=\"Label 2\" width=\"100\" height=\"50\" backgroundColor=\"green\"></Label>\n  <Label text=\"Label 3\" width=\"100\" height=\"50\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"100\" height=\"50\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (snippet 6)": {
    "prefix": "ns-flexbox-layout-snippet-6",
    "body": "<FlexboxLayout flexDirection=\"column-reverse\" justifyContent=\"space-around\" alignItems=\"stretch\" height=\"300\" width=\"300\"\n  backgroundColor=\"lightgray\">\n  <Label text=\"Label 1\" width=\"50\" height=\"50\" backgroundColor=\"red\"></Label>\n  <Label alignSelf=\"center\" text=\"Label 2\" width=\"50\" height=\"50\" backgroundColor=\"green\"></Label>\n  <Label alignSelf=\"flex-end\" text=\"Label 3\" width=\"50\" height=\"50\" backgroundColor=\"blue\"></Label>\n  <Label text=\"Label 4\" width=\"50\" height=\"50\" backgroundColor=\"yellow\"></Label>\n</FlexboxLayout>",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  },
  "Nativescript UI Layout - Flexbox Layout (complete)": {
    "prefix": "ns-flexbox-layout-comp",
    "body": "<FlexboxLayout>\n  $1\n</FlexboxLayout>\n\n<!-- NOTE: On iOS, you cannot set alignItems to baseline. -->\n\n<!--\nFlexboxLayout Properties\nPROPERTY\t      DESCRIPTION\nflexDirection\t  Gets or sets a value indicating the direction flex items are placed in the flex container. The flexDirection property accepts 4 different values: row (same as text direction), row-reverse (opposite to text direction), column (same as row but top to bottom), and column-reverse (same as row-reverse top to bottom). The default value is row.\nflexWrap      \tGets or sets a value indicating whether the flex items are forced in a single line or can be flowed into multiple lines. If set to multiple lines, it also defines the cross-axis which determines the direction new lines are stacked in. The flexWrap property accepts 3 different values: nowrap (single-line which may cause the container to overflow), wrap (multi-lines, direction is defined by flexDirection), and wrap-reverse (multi-lines, opposite to direction defined by flexDirection). The default value is nowrap.\njustifyContent \tGets or sets a value indicating the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line. The justifyContent property accepts 5 different values: flex-start (items are packed toward the start line), flex-end (items are packed toward to end line), center (items are centered along the line), space-between (items are evenly distributed in the line; first item is on the start line, last item on the end line), and space-around (items are evenly distributed in the line with equal space around them). The default value is flex-start.\nalignItems\t    Gets or sets a value indicating how flex items are laid out along the cross axis on the current line. You can think of it as the justifyContent version for the cross-axis (perpendicular to the main-axis). The alignItems property accepts 5 different values: flex-start (cross-start margin edge of the items is placed on the cross-start line), flex-end (cross-end margin edge of the items is placed on the cross-end line), center (items are centered in the cross-axis), baseline (items are aligned such as their baselines align), stretch (stretch to fill the container but still respect min-width/max-width). The default value is stretch.\nalignContent\t  Gets or sets a value that helps aligning a flex container's lines within it when there is extra space in the cross-axis, similar to how justifyContent aligns individual items within the main-axis. The alignContent property accepts 6 different values: flex-start (lines packed to the start of the container), flex-end (lines packed to the end of the container), center (lines packed to the center of the container), space-between (lines evenly distributed; the first line is at the start of the container while the last one is at the end), space-around (lines evenly distributed with equal space between them), and stretch (lines stretch to take up the remaining space). The default value is stretch. This property has no effect when the flexbox has only a single line.\n\nFlexboxLayout Child Properties\nPROPERTY\t      DESCRIPTION\norder\t          Gets or sets a value that changes the default ordering of flex items.\nflexGrow\t      Gets or sets a unitless value that serves as a proportion indicating whether the flex item is able to grow if necessary. It dictates what amount of the available space inside the flex container the item should take up.\nflexShrink\t    Gets or sets a value indicating the \"flex shrink factor\", which determines how much the flex item will shrink relative to the rest of the flex items in the flex container when there is not enough space on the row. When omitted, it is set to 1 and the flex shrink factor is multiplied by the flex basis when distributing negative space.\nalignSelf\t      Gets or sets a value that makes it possible to override the alignItems value for specific flex items. This property accepts the same 5 values as the alignItems: flex-start (cross-start margin edge of the item is placed on the cross-start line), flex-end (cross-end margin edge of the item is placed on the cross-end line), center (item is centered in the cross-axis), baseline (items are aligned such as their baseline are aligned), and stretch (stretch to fill the container but still respect min-width / max-width). The default value is stretch.\nflexWrapBefore\tGets or sets a boolean value controlling item wrapping. Setting it to true on flexbox item will force it to wrap on a new line. The default value is false. This property is not part of the official flexbox specification.\n-->",
    "description": "The FlexboxLayout is a non-conforming implementation of the CSS Flexible Box Layout based on an existing Apache-2 licensed flexbox implementation hosted on github.com/google/flexbox-layout.\n\nSource: https://docs.nativescript.org/angular/ui/layouts/layout-containers#flexboxlayout"
  }
}
