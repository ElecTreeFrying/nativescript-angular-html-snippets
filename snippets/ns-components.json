{
  "Nativescript UI Component - ActionBar (default)": {
    "prefix": "ns-actionbar",
    "body": "<ActionBar>$1</ActionBar>",
    "description": "The ActionBar is NativeScript’s abstraction over the Android ActionBar and iOS NavigationBar. It represents a toolbar at the top of the activity window, and can have a title, application-level navigation, as well as other custom interactive items.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar"
  },
  "Nativescript UI Component - ActionBar (complete)": {
    "prefix": "ns-actionbar-comp",
    "body": "<ActionBar title=\"${1:string}\">$2</ActionBar>\n<!--\nProperties\nNAME\tTYPE\tDESCRIPTION\ntitle\tstring\tGets or sets the action bar title.\ntitleView\tView\tGets or sets the title view. When set - replaces the title with a custom view.\n\nEvents\nNAME\t        DESCRIPTION\nloaded\t      Emitted when the view is loaded.\nunloaded\t    Emitted when the view is unloaded.\nlayoutChanged\tEmitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The ActionBar is NativeScript’s abstraction over the Android ActionBar and iOS NavigationBar. It represents a toolbar at the top of the activity window, and can have a title, application-level navigation, as well as other custom interactive items.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar"
  },
  "Nativescript UI Component - ActionBarExtension (default)": {
    "prefix": "ns-actionbarextension",
    "body": "<ActionBarExtension>\n  $1\n</ActionBarExtension>",
    "description": "Using the ActionBarExtension component you can add additional action items to the current ActionBar. This is useful if you are writing a reusable component that exposes an action (ex. \"save\"), but you don't want to override the whole ActionBar.\n\nSource: https://docs.nativescript.org/angular/ui/action-bar#adding-actions-to-existing-actionbar"
  },
  "Nativescript UI Component - ActionItem (default)": {
    "prefix": "ns-actionitem",
    "body": "<ActionItem>$1</ActionItem>",
    "description": "The ActionItem components are supporting the platform-specific position and systemIcon for iOS and Android.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#actionitem"
  },
  "Nativescript UI Component - ActionItem (property)": {
    "prefix": "ns-actionitem-prop",
    "body": "<ActionItem\n  text=\"${1:string}\"\n  icon=\"${2:(snippet: ns-icon-*)}\"\n  android.position=\"${3:(\"actionBar\", \"popup\", \"actionBarIfRoom\")}\"\n  android.systemIcon=\"${4:string}\"\n  ios.position=\"${5:(\"left\", \"right\")}\"\n  ios.systemIcon=\"${6:number}\">\n$1</ActionItem>",
    "description": "The ActionItem components are supporting the platform-specific position and systemIcon for iOS and Android.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#actionitem"
  },
  "Nativescript UI Component - ActionItem (complete)": {
    "prefix": "ns-actionitem-comp",
    "body": "<ActionItem\n  text=\"${1:string}\"\n  icon=\"${2:(snippet: ns-icon-*)}\"\n  android.position=\"\"\n  android.systemIcon=\"\"\n  ios.position=\"\"\n  ios.systemIcon=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\">\n$1</ActionItem>\n<!--\nProperties\nNAME\t              TYPE\tDESCRIPTION\ntext\t              string\tGets or sets the text of the action item.\nicon\t              string\tGets or sets the icon of the action item. Supports local images (~/), resources (res://) and icon fonts (fonts://)\nandroid.position\t  string \tSets the position of the item (default value is actionBar).\nandroid.systemIcon\tstring\tAndroid only Sets a path to a resource icon (see the list of Android system drawables)\nios.position\t      string \tSets the position of the item (default value is left).\nios.systemIcon\t    number\tiOS only Sets the icon of the action item while using UIBarButtonSystemIcon enumeration.\n\nEvents\nNAME\t        DESCRIPTION\nloaded\t      Emitted when the view is loaded.\nunloaded\t    Emitted when the view is unloaded.\nlayoutChanged\tEmitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The ActionItem components are supporting the platform-specific position and systemIcon for iOS and Android.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#actionitem"
  },
  "Nativescript UI Component - NavigationButton (default)": {
    "prefix": "ns-navigationbutton",
    "body": "<NavigationButton></NavigationButton>",
    "description": "The NavigationButton component is a common abstraction over the iOS back button and the Android navigation button.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#properties-NavigationButton"
  },
  "Nativescript UI Component - NavigationButton (property)": {
    "prefix": "ns-navigationbutton-prop",
    "body": "<NavigationButton\n  text=\"${1:string}\"\n  icon=\"${2:(snippet: ns-icon-*)}\">\n</NavigationButton>",
    "description": "The NavigationButton component is a common abstraction over the iOS back button and the Android navigation button.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#properties-NavigationButton"
  },
  "Nativescript UI Component - NavigationButton (complete)": {
    "prefix": "ns-navigationbutton-comp",
    "body": "<NavigationButton\n  text=\"${1:string}\"\n  icon=\"${2:(snippet: ns-icon-*)}\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (resumenativeupdates)=\"\">\n</NavigationButton>\n<!--\nNavigationButton Properties\nNAME\tTYPE\t  DESCRIPTION\ntext\tstring\tGets or sets the text of the action item.\nicon\tstring\tGets or sets the icon of the action item.\n\nEvents\nNAME\t        DESCRIPTION\nloaded\t      Emitted when the view is loaded.\nunloaded\t    Emitted when the view is unloaded.\nlayoutChanged\tEmitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The NavigationButton component is a common abstraction over the iOS back button and the Android navigation button.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/action-bar#properties-NavigationButton"
  },
  "Nativescript UI Component - ActivityIndicator (default)": {
    "prefix": "ns-activityindicator",
    "body": "<ActivityIndicator></ActivityIndicator>",
    "description": "The ActivityIndicator represents a UI widget which displays a progress indicator hinting the user for some background operation running like loading image, data, accepting a request, etc. You can control its behavior by setting or binding to its busy property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/activity-indicator"
  },
  "Nativescript UI Component - ActivityIndicator (property)": {
    "prefix": "ns-activityindicator-prop",
    "body": "<ActivityIndicator busy=\"${1:boolean}\"></ActivityIndicator>",
    "description": "The ActivityIndicator represents a UI widget which displays a progress indicator hinting the user for some background operation running like loading image, data, accepting a request, etc. You can control its behavior by setting or binding to its busy property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/activity-indicator"
  },
  "Nativescript UI Component - ActivityIndicator (complete)": {
    "prefix": "ns-activityindicator-comp",
    "body": "<ActivityIndicator\n  busy=\"${1:boolean}\"\n  (busyChange)=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (layoutChanged)=\"\">\n</ActivityIndicator>\n<!--\nProperties\nNAME\tTYPE\t  DESCRIPTION\nbusy\tboolean\tGets or sets a value indicating whether the widget is currently displaying progress.\n\nEvents\nNAME\t        DESCRIPTION\nbusyChange\t  Emitted when the ActivityIndicator busy property is changed.\nloaded\t      Emitted when the view is loaded.\nunloaded\t    Emitted when the view is unloaded.\nlayoutChanged\tEmitted when the layout bounds of a view changes due to layout processing.\n -->",
    "description": "The ActivityIndicator represents a UI widget which displays a progress indicator hinting the user for some background operation running like loading image, data, accepting a request, etc. You can control its behavior by setting or binding to its busy property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/activity-indicator"
  },
  "Nativescript UI Component - Button (default)": {
    "prefix": "ns-button",
    "body": "<Button></Button>",
    "description": "A Button component provides an easy-to-use way for interacting through the application and invoking custom logic in response to that. Once the user taps it, the button performs any actions attached to it.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/button"
  },
  "Nativescript UI Component - Button (property)": {
    "prefix": "ns-button-prop",
    "body": "<Button text=\"\"></Button>",
    "description": "A Button component provides an easy-to-use way for interacting through the application and invoking custom logic in response to that. Once the user taps it, the button performs any actions attached to it.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/button"
  },
  "Nativescript UI Component - Button (complete)": {
    "prefix": "ns-button-comp",
    "body": "<Button\n  text=\"${1:string}\"\n  (tap)=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (layoutChanged)=\"\">\n</Button>\n<!--\nProperties\nNAME\tTYPE\t  DESCRIPTION\ntext\tstring\tGets or sets the label of the button.\n\nEvents\nNAME\t        DESCRIPTION\ntap\t          Emitted when the button is tapped.\nloaded\t      Emitted when the view is loaded.\nunloaded\t    Emitted when the view is unloaded.\nlayoutChanged\tEmitted when the layout bounds of a view changes due to layout processing.\n -->",
    "description": "A Button component provides an easy-to-use way for interacting through the application and invoking custom logic in response to that. Once the user taps it, the button performs any actions attached to it.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/button"
  },
  "Nativescript UI Component - DatePicker (default)": {
    "prefix": "ns-datepicker",
    "body": "<DatePicker></DatePicker>",
    "description": "DatePicker control enables the user to choose a date as a ready-to-use dialog. Every date part can be picked separately by its corresponding section of the control - for day, month and year.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/date-picker"
  },
  "Nativescript UI Component - DatePicker (property)": {
    "prefix": "ns-datepicker-prop",
    "body": "<DatePicker\n  year=\"1980\"\n  month=\"4\"\n  day=\"20\">\n</DatePicker>",
    "description": "DatePicker control enables the user to choose a date as a ready-to-use dialog. Every date part can be picked separately by its corresponding section of the control - for day, month and year.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/date-picker"
  },
  "Nativescript UI Component - DatePicker (complete)": {
    "prefix": "ns-datepicker-comp",
    "body": "<DatePicker\n  year=\"1980\"\n  month=\"4\"\n  day=\"20\"\n  [minDate]=\"minDate\"\n  [maxDate]=\"maxDate\"\n  (dateChange)=\"onDateChanged(event)\"\n  (dayChange)=\"onDayChanged(event)\"\n  (monthChange)=\"onMonthChanged(event)\"\n  (yearChange)=\"onYearChanged(event)\"\n  (loaded)=\"onDatePickerLoaded(event)\">\n</DatePicker>\n<!--\nProperties\nNAME\t  TYPE\t  DESCRIPTION\ndate\t  Date\t  Gets or sets the entire date as Date object.\nminDate\tDate\t  Gets or sets the min date\nmaxDate\tDate\t  Gets or sets the max date\nday\t    number\tGets or sets the day. The days start from 1.\nmonth\t  number\tGets or sets the month. The months start from 1.\nyear\t  number\tGets or sets the year.\n\nEvents\nNAME\t      DESCRIPTION\ndateChange\tEmitted when the date property is changed.\ndayChange\t  Emitted when the day property is changed.\nmonthChange\tEmitted when the month property is changed.\nyearChange\tEmitted when the year property is changed.\n-->",
    "description": "DatePicker control enables the user to choose a date as a ready-to-use dialog. Every date part can be picked separately by its corresponding section of the control - for day, month and year.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/date-picker"
  },
  "Nativescript UI Component - FormattedString (default)": {
    "prefix": "ns-formattedstring",
    "body": "<FormattedString>\n  $1\n</FormattedString>",
    "description": "NativeScript has a special class called FormattedString to support various text transformations and decorations. The FormattedString class can be used with all text-related components like Label, TextView, TextField and even Button.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/formatted-string"
  },
  "Nativescript UI Component - FormattedString (complete)": {
    "prefix": "ns-formattedstring-comp",
    "body": "<FormattedString\n  [spans]=\"${1:observable}\">\n</FormattedString>\n<!--\nProperties\nNAME\tTYPE\t                DESCRIPTION\nspans\tObservableArray<Span>\tAn observable collection of Span objects used to define common text properties.\n-->",
    "description": "NativeScript has a special class called FormattedString to support various text transformations and decorations. The FormattedString class can be used with all text-related components like Label, TextView, TextField and even Button.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/formatted-string"
  },
  "Nativescript UI Component - HtmlView (default)": {
    "prefix": "ns-htmlview",
    "body": "<HtmlView [html]=\"${1:htmlString}\"></HtmlView>",
    "description": "The HtmlView represents a view with HTML content. Use this component instead of a WebView when you want to show static HTML content with base HTML support.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/htmlview"
  },
  "Nativescript UI Component - HtmlView (complete)": {
    "prefix": "ns-htmlview-comp",
    "body": "<HtmlView\n  [html]=\"${1:htmlString}\"\n  (layoutChangedEvent)=\"\"\n  (loaded)=\"\">\n</HtmlView>\n<!--\nProperties\nNAME\tTYPE\tDESCRIPTION\nhtml\tstring\tGets or sets the HTML string. Limited HTML support - for extended support use WebView\n\nEvents\nNAME\t               DESCRIPTION\nlayoutChangedEvent\t String value used when hooking to layoutChanged event.\nloaded\t             String value used when hooking to loaded event.\n-->",
    "description": "The HtmlView represents a view with HTML content. Use this component instead of a WebView when you want to show static HTML content with base HTML support.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/htmlview"
  },
  "Nativescript UI Component - Image (default)": {
    "prefix": "ns-image",
    "body": "<Image></Image>",
    "description": "The Image widget shows an image in your mobile application.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/image"
  },
  "Nativescript UI Component - Image (comp)": {
    "prefix": "ns-image-comp",
    "body": "<Image\n  <!-- Android only --->\n  decodeHeight=\"${1:number}\"\n  <!-- Android only --->\n  decodeWidth=\"${2:number}\"\n  isLoaded=\"${3:boolean}\"\n  isLoading=\"${4:boolean}\"\n  loadMode=\"${5:(\"async\", \"sync\")}\"\n  src=\"${6:string}\"\n  stretch=\"${7:(\"none\", \"aspectFill\", \"aspectFit\")}\"\n  tintColor=\"${8:(Color)}\">\n</Image>\n<!--\nProperties\nNAME\t        TYPE\t  DESCRIPTION\ndecodeHeight\tLength\t[Android only] Gets or sets the desired decode height of the image.\ndecodeWidth\t  Length\t[Android only] Gets or sets the desired decode width of the image.\nisLoaded\t    boolean\tGets a value indicating if the image is loaded.\nisLoading\t    boolean\tGets a value indicating if the image is currently loading.\nloadMode\t    string\tGets or sets the loading strategy for images on the local file system.\nsrc\t          string\tGets or sets the source of the Image. This can be either an URL string or a native image instance.\nstretch\t      Stretch\tGets or sets the image stretch mode.\ntintColor\t    Color\t  A color used to tint template images.\n-->",
    "description": "The Image widget shows an image in your mobile application.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/image"
  },
  "Nativescript UI Component - Label (default)": {
    "prefix": "ns-label",
    "body": "<Label></Label>",
    "description": "The Label widget provides a text label that shows read-only text.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/label"
  },
  "Nativescript UI Component - Label (property)": {
    "prefix": "ns-label-prop",
    "body": "<Label\n  letterSpacing=\"${1:number}\"\n  lineHeight=\"${2:number}\"\n  text=\"${3:string}\"\n  textAlignment=\"${4:\"initial\", \"left\", \"center\", \"right\"}\"\n  textDecoration=\"${5:\"none\", \"underline\", \"line-through\", \"underline\", \"line-through\"}\"\n  textTransform=\"${6:(\"initial\", \"none\", \"capitalize\", \"uppercase\", \"lowercase\"\t)}\"\n  textWrap=\"${7:boolean}\"\n  whiteSpace=\"${8:(\"initial\", \"normal\", \"nowrap\")}\">\n</Label>",
    "description": "The Label widget provides a text label that shows read-only text.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/label"
  },
  "Nativescript UI Component - Label (complete)": {
    "prefix": "ns-label-comp",
    "body": "<Label\n  letterSpacing=\"${1:number}\"\n  lineHeight=\"${2:number}\"\n  text=\"${3:string}\"\n  textAlignment=\"${4:\"initial\", \"left\", \"center\", \"right\"}\"\n  textDecoration=\"${5:\"none\", \"underline\", \"line-through\", \"underline\", \"line-through\"}\"\n  textTransform=\"${6:(\"initial\", \"none\", \"capitalize\", \"uppercase\", \"lowercase\"\t)}\"\n  textWrap=\"${7:boolean}\"\n  whiteSpace=\"${8:(\"initial\", \"normal\", \"nowrap\")}\"\n  (textChange)=\"\">\n</Label>\n<!--\nProperties\nNAME\t          TYPE\t  DESCRIPTION\nletterSpacing\t  number\tGets or sets letterSpace style property.\nlineHeight\t    number\tGets or sets lineHeight style property.\ntext\t          string\tGets or sets the Label text.\ntextAlignment\t  string\tGets or sets text-alignment style property.\ntextDecoration\tstring\tGets or sets text swcoration style property.\ntextTransform\t  string\tGets or sets text transform style property.\ntextWrap        boolean\tGets or sets whether the Label wraps text or not.\nwhiteSpace\t    string\tGets or sets the white space style.\n\nEvents\nNAME\t      DESCRIPTION\ntextChange\tEmitted when the label text is changed.\n-->",
    "description": "The Label widget provides a text label that shows read-only text.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/label"
  },
  "Nativescript UI Component - ListPicker (default)": {
    "prefix": "ns-listpicker",
    "body": "<ListPicker></ListPicker>",
    "description": "The ListPicker is a spinner type component for listing options.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listpicker"
  },
  "Nativescript UI Component - ListPicker (property)": {
    "prefix": "ns-listpicker-prop",
    "body": "<ListPicker\n  items=\"${1:Array<any>}\"\n  selectedIndex=\"${2:number}\"\n</ListPicker>",
    "description": "The ListPicker is a spinner type component for listing options.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listpicker"
  },
  "Nativescript UI Component - ListPicker (complete)": {
    "prefix": "ns-listpicker-comp",
    "body": "<ListPicker\n  items=\"${1:Array<any>}\"\n  selectedIndex=\"${2:number}\"\n  (selectedIndexChange)=\"\">\n</ListPicker>\n<!--\nProperties\nNAME\t        TYPE\t      DESCRIPTION\nitems\t        Array<any>\tGets or set the items collection of the ListPicker. The items property can be set to an array or an object defining length and getItem(index) method.\nselectedIndex\tnumber\t    Gets or set the items collection of the ListPicker. The items property can be set to an array or an object defining length and getItem(index) method.\n\nEvents\nNAME\t              DESCRIPTION\nselectedIndexChange\tEmitted when the selectedIndex is changed.\n-->",
    "description": "The ListPicker is a spinner type component for listing options.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listpicker"
  },
  "Nativescript UI Component - ListView (default)": {
    "prefix": "ns-listview",
    "body": "<ListView></ListView>",
    "description": "Using a ListView control inside Angular app requires some special attention due to the complexity of the NativeScript ListView control, with custom item templates, bindings and so on.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listview"
  },
  "Nativescript UI Component - ListView (property)": {
    "prefix": "ns-listview-prop",
    "body": "<ListView\n  items=\"${1:Array<any> | ItemsSource}\"\n  itemTemplateSelector=\"${2:function}\"\n  itemTemplates=\"${3:Array<KeyedTemplate>}\"\n  separatorColor=\"${4:string | Color}\"\n  rowHeight=\"${5:Length}\"\n  iosEstimatedRowHeight=\"${6:Length}\">\n</ListView>",
    "description": "Using a ListView control inside Angular app requires some special attention due to the complexity of the NativeScript ListView control, with custom item templates, bindings and so on.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listview"
  },
  "Nativescript UI Component - ListView (complete)": {
    "prefix": "ns-listview-comp",
    "body": "<ListView\n  items=\"${1:Array<any> | ItemsSource}\"\n  itemTemplateSelector=\"${2:function}\"\n  itemTemplates=\"${3:Array<KeyedTemplate>}\"\n  separatorColor=\"${4:string | Color}\"\n  rowHeight=\"${5:Length}\"\n  iosEstimatedRowHeight=\"${6:Length}\"\n  (itemLoading)=\"\"\n  (itemTap)=\"\"\n  (loadMoreItems)=\"\">\n</ListView>\n<!--\nProperties\nNAME\t                TYPE\t                    DESCRIPTION\nitems\t                Array<any> | ItemsSource\tGets or set the items collection of the ListView. The items property can be set to an array or an object defining length and getItem(index) method.\nitemTemplateSelector\tfunction\t                A function that returns the appropriate ket template based on the data item.\nitemTemplates\t        Array<KeyedTemplate>\t    Gets or set the list of item templates for the item template selector.\nseparatorColor\t      string | Color\t          Gets or set the items separator line color of the ListView.\nrowHeight\t            Length\t                  Gets or set row height of the ListView.\niosEstimatedRowHeight\tLength\t                  Gets or set the estimated height of rows in the ListView. Default value: 44px\n\nEvents\nNAME\t         DESCRIPTION\nitemLoading\t   Emitted when a View for the data at the specified index should be created.\nitemTap\t       Emitted when a ListView item is tapped.\nloadMoreItems\t Emitted when the ListView is scrolled so that its last item is visible.\n-->",
    "description": "Using a ListView control inside Angular app requires some special attention due to the complexity of the NativeScript ListView control, with custom item templates, bindings and so on.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/listview"
  },
  "Nativescript UI Component - Progress (default)": {
    "prefix": "ns-progress",
    "body": "<Progress></Progress>",
    "description": "The Progress widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation."
  },
  "Nativescript UI Component - Progress (complete)": {
    "prefix": "ns-progress-comp",
    "body": "<Progress\n  value=\"${1:number}\"\n  maxValue=\"${2:number}\">\n</Progress>\n<!--\nProperties\nNAME\t    TYPE\t  DESCRIPTION\nvalue\t    number\tGets or sets a progress current value.\nmaxValue\tnumber\tGets or sets a progress max value.\n-->",
    "description": "The Progress widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation."
  },
  "Nativescript UI Component - Scroll View (default)": {
    "prefix": "ns-scroll-view",
    "body": "<ScrollableView></ScrollableView>",
    "description": "The ScrollableView component allows you to display a scrollable area in your application, which has content that is larger than its bounds. The ScrollView has an orientation property, which allows you to set different orientations to the view.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/scroll-view"
  },
  "Nativescript UI Component - Scroll View (property)": {
    "prefix": "ns-scroll-view-prop",
    "body": "<ScrollableView\n  orientation=\"${1:Orientation}\">\n</ScrollableView>",
    "description": "The ScrollableView component allows you to display a scrollable area in your application, which has content that is larger than its bounds. The ScrollView has an orientation property, which allows you to set different orientations to the view.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/scroll-view"
  },
  "Nativescript UI Component - Scroll View (complete)": {
    "prefix": "ns-scroll-view-comp",
    "body": "<ScrollableView\n  orientation=\"${1:Orientation}\"\n  (scroll)=\"$2\">\n</ScrollableView>\n<!--\nProperties\nNAME\t        TYPE\t        DESCRIPTION\norientation\t  Orientation\t  Gets or sets direction in which the content can be scrolled. Supported values are \"vertical\" (default) and \"horizontal\".\n\nEvents\nNAME\t  DESCRIPTION\nscroll  Emitted when the component is scrolled\n-->",
    "description": "The ScrollableView component allows you to display a scrollable area in your application, which has content that is larger than its bounds. The ScrollView has an orientation property, which allows you to set different orientations to the view.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/scroll-view"
  },
  "Nativescript UI Component - Search Bar (default)": {
    "prefix": "ns-search-bar",
    "body": "<SearchBar></SearchBar>",
    "description": "The SearchBar module represents a UI component similar to UISearchBar in iOS and android.widget.SearchView for Android, both of which allow you to to create a simple filter for the the content in the app. This component provides hint and text properties and submit and clear events.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/search-bar"
  },
  "Nativescript UI Component - Search Bar (property)": {
    "prefix": "ns-search-bar-prop",
    "body": "<SearchBar\n  hint=\"${1:string}\"\n  text=\"${2:string}\"\n  textFieldBackgroundColor=\"${3:Color}\"\n  textFieldHintColor=\"${4:Color}\">\n</SearchBar>",
    "description": "The SearchBar module represents a UI component similar to UISearchBar in iOS and android.widget.SearchView for Android, both of which allow you to to create a simple filter for the the content in the app. This component provides hint and text properties and submit and clear events.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/search-bar"
  },
  "Nativescript UI Component - Search Bar (complete)": {
    "prefix": "ns-search-bar-comp",
    "body": "<SearchBar\n  hint=\"${1:string}\"\n  text=\"${2:string}\"\n  textFieldBackgroundColor=\"${3:Color}\"\n  textFieldHintColor=\"${4:Color}\"\n  (clear)=\"\"\n  (submit)=\"\">\n</SearchBar>\n<!--\nProperties\nNAME\t                    TYPE\t  DESCRIPTION\nhint\t                    string\tGets or sets the text of the search bar text field hint/placeholder.\ntext\t                    string\tGets or sets a search bar text.\ntextFieldBackgroundColor\tColor\t  Gets or sets the TextField background color of the SearchBar component.\ntextFieldHintColor\t      Color\t  Gets or sets the TextField Hint color of the SearchBar component.\n\nEvents\nNAME\t  DESCRIPTION\nclear\t  Emitted when the search is cleared (via the clear button).\nsubmit\tEmitted when the serach term is submitted.\n-->",
    "description": "The SearchBar module represents a UI component similar to UISearchBar in iOS and android.widget.SearchView for Android, both of which allow you to to create a simple filter for the the content in the app. This component provides hint and text properties and submit and clear events.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/search-bar"
  },
  "Nativescript UI Component - Segmented Bar (default)": {
    "prefix": "ns-segmented-bar",
    "body": "<SegmentedBar></SegmentedBar>",
    "description": "Using a SegmentedBar inside a NativeScript project gives you a simple way to define a collection of tabbed views. The SegmentedBar’s selectedIndexChange event is emitted you for every changes of the component’s selectedIndex.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/segmented-bar"
  },
  "Nativescript UI Component - Segmented Bar (property)": {
    "prefix": "ns-segmented-bar-prop",
    "body": "<SegmentedBar\n  selectedIndex=\"${1:number}\"\n  items=\"${1:Array<SegmentedBarItem>}\"\n  selectedBackgroundColor=\"${1:Color}\">\n</SegmentedBar>",
    "description": "Using a SegmentedBar inside a NativeScript project gives you a simple way to define a collection of tabbed views. The SegmentedBar’s selectedIndexChange event is emitted you for every changes of the component’s selectedIndex.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/segmented-bar"
  },
  "Nativescript UI Component - Segmented Bar (complete)": {
    "prefix": "ns-segmented-bar-comp",
    "body": "<SegmentedBar\n  selectedIndex=\"${1:number}\"\n  items=\"${1:Array<SegmentedBarItem>}\"\n  selectedBackgroundColor=\"${1:Color}\"\n  (selectedIndexChanged)=\"\">\n</SegmentedBar>\n<!--\nProperties\nNAME\t                  TYPE\t                  DESCRIPTION\nselectedIndex\t          number\t                Gets or sets the selected index of the SegmentedBar component.\nitems\t                  Array<SegmentedBarItem>\tGets or sets the items of the SegmentedBar.\nselectedBackgroundColor\tColor\t                  Gets or sets the selected background color of the SegmentedBar component.\n\nEvents\nNAME\t                DESCRIPTION\nselectedIndexChanged\tEmitted when the selected index is changed (via interaction or programmatically).\n-->",
    "description": "Using a SegmentedBar inside a NativeScript project gives you a simple way to define a collection of tabbed views. The SegmentedBar’s selectedIndexChange event is emitted you for every changes of the component’s selectedIndex.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/segmented-bar"
  },
  "Nativescript UI Component - Segmented Bar Item (default)": {
    "prefix": "ns-segmented-bar-item",
    "body": "<SegmentedBarItem></SegmentedBarItem>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_segmented_bar_.segmentedbaritem"
  },
  "Nativescript UI Component - Slider (default)": {
    "prefix": "ns-slider",
    "body": "<Slider></Slider>",
    "description": "The NativeScript Slider component lets the user to drag a control to select a value. You can set the specific range to use by setting the component’s minValue and maxValue.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/slider"
  },
  "Nativescript UI Component - Slider (complete)": {
    "prefix": "ns-slider-comp",
    "body": "<Slider\n  value=\"10\"\n  minValue=\"0\"\n  maxValue=\"100\">\n</Slider>\n<!--\nProperties\nNAME\t   TYPE   DESCRIPTION\nvalue    number\nminValue number\nmaxValue number",
    "description": "The NativeScript Slider component lets the user to drag a control to select a value. You can set the specific range to use by setting the component’s minValue and maxValue.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/slider",
    "Nativescript UI Component - Switch (default)": {
      "prefix": "ns-switch",
      "body": "<Switch></Switch>",
      "description": "The Switch component allows users to toggle a control between two states. The default state of the component is off, or false, however you can change the state by setting the checked property to a boolean value. To handle the state change event you can use the checkedChange property, which notifies the app when the value has changed.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/switch"
    },
    "Nativescript UI Component - Switch (property)": {
      "prefix": "ns-switch-prop",
      "body": "<Switch\n  checked=\"${1:boolean}\"\n  offBackgroundColor=\"${2:Color}\"\n</Switch>",
      "description": "The Switch component allows users to toggle a control between two states. The default state of the component is off, or false, however you can change the state by setting the checked property to a boolean value. To handle the state change event you can use the checkedChange property, which notifies the app when the value has changed.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/switch"
    },
    "Nativescript UI Component - Switch (complete)": {
      "prefix": "ns-switch-comp",
      "body": "<Switch\n  checked=\"true\"\n  offBackgroundColor=\"${2:Color}\"\n  (checkedChange)=\"onCheckedChange(event)\">\n</Switch>\n<!--\nProperties\nNAME\t              TYPE\t  DESCRIPTION\nchecked\t            boolean\tGets or sets if a switch is checked or not.\noffBackgroundColor\tColor\t  Gets or sets the off-state color.\n\nEvents\nNAME\t        DESCRIPTION\ncheckedChange\n-->",
      "description": "The Switch component allows users to toggle a control between two states. The default state of the component is off, or false, however you can change the state by setting the checked property to a boolean value. To handle the state change event you can use the checkedChange property, which notifies the app when the value has changed.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/switch"
    }
  },
  "Nativescript UI Component - Bottom Navigation (default)": {
    "prefix": "ns-bottom-navigation",
    "body": "<BottomNavigation></BottomNavigation>",
    "description": "The BottomNavigation component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for BottomNavigation is a high level navigation with 3 to 5 tabs each with separate function. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/bottom-navigation#bottom-navigation"
  },
  "Nativescript UI Component - Bottom Navigation (property)": {
    "prefix": "ns-bottom-navigation-prop",
    "body": "<BottomNavigation\n  items=\"${1:Array<TabContentItem>}\"\n  selectedIndex=\"${2:number}\"\n  tabStrip=\"${3:TabStrip}\">\n</BottomNavigation>",
    "description": "The BottomNavigation component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for BottomNavigation is a high level navigation with 3 to 5 tabs each with separate function. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/bottom-navigation#bottom-navigation"
  },
  "Nativescript UI Component - Bottom Navigation (complete)": {
    "prefix": "ns-bottom-navigation-comp",
    "body": "<BottomNavigation\n  items=\"${1:Array<TabContentItem>}\"\n  selectedIndex=\"${2:number}\"\n  tabStrip=\"${3:TabStrip}\"\n  (selectedIndexChanged)=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (layoutChanged)=\"\">\n</BottomNavigation>\n<!--\nProperties\nNAME\t        TYPE\t                DESCRIPTION\nitems\t        Array<TabContentItem>\tGets or sets the items of the BottomNavigation.\nselectedIndex\tnumber\t              Gets or sets the selectedIndex of the BottomNavigation.\ntabStrip\t    TabStrip\t            Gets or sets the tab strip of the BottomNavigation.\n\nEvents\nNAME\tDESCRIPTION\nselectedIndexChanged\tEmitted when the selectedIndex property is changed.\nloaded\t              Emitted when the view is loaded.\nunloaded\t            Emitted when the view is unloaded.\nlayoutChanged\t        Emitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The BottomNavigation component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for BottomNavigation is a high level navigation with 3 to 5 tabs each with separate function. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/bottom-navigation#bottom-navigation"
  },
  "Nativescript UI Component - Tab Strip (default)": {
    "prefix": "ns-tab-strip",
    "body": "<TabStrip></TabStrip>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_.tabstrip"
  },
  "Nativescript UI Component - Tab Strip (property)": {
    "prefix": "ns-tab-strip-prop",
    "body": "<TabStrip\n  iosIconRenderingMode=\"${1:(\"automatic\", \"alwaysOriginal\", \"alwaysTemplate\")}\"\n  isIconSizeFixed=\"${1:boolean}\"\n  items=\"${2:Array<TabStripItem>}\">\n</TabStrip>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_.tabstrip"
  },
  "Nativescript UI Component - Tab Strip (complete)": {
    "prefix": "ns-tab-strip-comp",
    "body": "<TabStrip\n  iosIconRenderingMode=\"${1:(\"automatic\", \"alwaysOriginal\", \"alwaysTemplate\")}\"\n  isIconSizeFixed=\"${1:boolean}\"\n  items=\"${2:Array<TabStripItem>}\"\n  (itemTap)=\"\">\n</TabStrip>\n<!--\nTabStrip\nProperties\nNAME\t                TYPE\t              DESCRIPTION\niosIconRenderingMode\tstring\t            Gets or sets the icon rendering mode on iOS.\nisIconSizeFixed\t      boolean\t            When set to true the icon will have fixed size following the platform-specific design guidelines. Default value: true.\nitems\t                Array<TabStripItem>\tGets or sets an array of strip items of the TabStrip.\n\nEvents\nNAME\t  DESCRIPTION\nitemTap\tEmitted when a TabStripItem is tapped.\n-->",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_.tabstrip"
  },
  "Nativescript UI Component - Tab Strip Item (default)": {
    "prefix": "ns-tab-strip-item",
    "body": "<TabStripItem></TabStripItem>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_item_.tabstripitem"
  },
  "Nativescript UI Component - Tab Strip Item (property)": {
    "prefix": "ns-tab-strip-item-prop",
    "body": "<TabStripItem\n  title=\"${1:string}\"\n  iconSource=\"${2:string}\"\n  image=\"${3:Image}\"\n  label=\"${4:Label}\">\n</TabStripItem>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_item_.tabstripitem"
  },
  "Nativescript UI Component - Tab Strip Item (complete)": {
    "prefix": "ns-tab-strip-item-comp",
    "body": "<TabStripItem\n  title=\"${1:string}\"\n  iconSource=\"${2:string}\"\n  image=\"${3:Image}\"\n  label=\"${4:Label}\"\n  (tap)=\"\">\n</TabStripItem>\n<!--\nTabStripItem\nProperties\nNAME\t      TYPE   \tDESCRIPTION\ntitle\t      string\tGets or sets the title of the tab strip entry.\niconSource\tstring\tGets or sets the icon source of the tab strip entry. Supports local image paths (~), resource images (res://) and icon fonts (font://)\nimage\t      Image\t  Gets or sets the image of the tab strip entry.\nlabel\t      Label \tGets or sets the label of the tab strip entry.\n\nEvents\nNAME\tDESCRIPTION\ntap\t  Emitted when a TabStripItem is tapped.\n-->",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_strip_item_.tabstripitem"
  },
  "Nativescript UI Component - Tab Content Item (default)": {
    "prefix": "ns-tab-content-item",
    "body": "<TabContentItem></TabContentItem>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_navigation_tab_content_item_.tabcontentitem"
  },
  "Nativescript UI Component - Tabs (default)": {
    "prefix": "ns-tabs",
    "body": "<Tabs></Tabs>",
    "description": "The Tabs component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for Tabs is a mid level navigation. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tabs#properties-Tabs"
  },
  "Nativescript UI Component - Tabs (property)": {
    "prefix": "ns-tabs-prop",
    "body": "<Tabs\n  items=\"${1:Array<TabContentItem>}\"\n  selectedIndex=\"${3:number}\"\n  tabStrip=\"${3:TabStrip}\"\n  tabsPosition=\"${4:(\"top\", \"bottom\")}\">\n</Tabs>",
    "description": "The Tabs component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for Tabs is a mid level navigation. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tabs#properties-Tabs"
  },
  "Nativescript UI Component - Tabs (complete)": {
    "prefix": "ns-tabs-comp",
    "body": "<Tabs\n  items=\"${1:Array<TabContentItem>}\"\n  selectedIndex=\"${3:number}\"\n  tabStrip=\"${3:TabStrip}\"\n  tabsPosition=\"${4:(\"top\", \"bottom\")}\"\n  (selectedIndexChanged)=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (layoutChanged)=\"\">\n</Tabs>\n<!--\nProperties\nNAME\t        TYPE\t                DESCRIPTION\nitems\t        Array<TabContentItem>\tGets or sets the items of the BottomNavigation.\nselectedIndex\tnumber\t              Gets or sets the selectedIndex of the BottomNavigation.\ntabStrip\t    TabStrip\t            Gets or sets the tab strip of the BottomNavigation.\ntabsPosition\tstring        \t      Gets or sets the position state of the Tabs. Default value: top\n\nEvents\nNAME\t                DESCRIPTION\nselectedIndexChanged\tEmitted when the selectedIndex property is changed.\nloaded\t              Emitted when the view is loaded.\nunloaded\t            Emitted when the view is unloaded.\nlayoutChanged\t        Emitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The Tabs component provides a simple way to navigate between different views while providing common UI for both iOS and Android platforms. The recommended scenario suitable for Tabs is a mid level navigation. For additional information and details about bottom navigation refer to the Material Design guidelines.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tabs#properties-Tabs"
  },
  "Nativescript UI Component - Tab View (default)": {
    "prefix": "ns-tab-view",
    "body": "<!-- Important: With version 6 of NativeScript the TabView component is deprecated. Consider using BottomNavigation or Tabs components instead as these components are providing much greater control and functionalities. -->\n<TabView></TabView>",
    "description": "The TabView component provides a simple way to navigate between different views by tapping on some of the tabs or by swiping between the views. By default the TabView will load the view of the first tab, however it's possible to load alternative tabs when the app starts by setting the component’s selectedIndex property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tab-view"
  },
  "Nativescript UI Component - Tab View (property)": {
    "prefix": "ns-tab-view-prop",
    "body": "<!-- Important: With version 6 of NativeScript the TabView component is deprecated. Consider using BottomNavigation or Tabs components instead as these components are providing much greater control and functionalities. -->\n<TabView\n  androidOffscreenTabLimit=\"${1:number}\"\n  androidSelectedTabHighlightColor=\"${2:Color}\"\n  iosIconRenderingMode=\"${3:(\"automatic\", \"alwaysOriginal\", \"alwaysTemplate\")}\"\n  items=\"${4:Array<TabViewItem>}\"\n  selectedIndex=\"${5:number}\"\n  selectedTabTextColor=\"${6:Color}\"\n  tabBackgroundColor=\"${7:Color}\"\n  tabTextColor=\"${8:Color}\"\n  tabTextFontSize=\"${9:Color}\">\n</TabView>",
    "description": "The TabView component provides a simple way to navigate between different views by tapping on some of the tabs or by swiping between the views. By default the TabView will load the view of the first tab, however it's possible to load alternative tabs when the app starts by setting the component’s selectedIndex property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tab-view"
  },
  "Nativescript UI Component - Tab View (complete)": {
    "prefix": "ns-tab-view-comp",
    "body": "<!-- Important: With version 6 of NativeScript the TabView component is deprecated. Consider using BottomNavigation or Tabs components instead as these components are providing much greater control and functionalities. -->\n<TabView\n  androidOffscreenTabLimit=\"${1:number}\"\n  androidSelectedTabHighlightColor=\"${2:Color}\"\n  iosIconRenderingMode=\"${3:(\"automatic\", \"alwaysOriginal\", \"alwaysTemplate\")}\"\n  items=\"${4:Array<TabViewItem>}\"\n  selectedIndex=\"${5:number}\"\n  selectedTabTextColor=\"${6:Color}\"\n  tabBackgroundColor=\"${7:Color}\"\n  tabTextColor=\"${8:Color}\"\n  tabTextFontSize=\"${9:Color}\"\n  (selectedIndexChanged)=\"\"\n  (loaded)=\"\"\n  (unloaded)=\"\"\n  (layoutChanged)=\"\">\n</TabView>\n<!--\nProperties\nNAME\t                            TYPE\t             DESCRIPTION\nandroidOffscreenTabLimit\t        number\t           Gets or sets the number of tabs that should be retained to either side of the current tab in the view hierarchy in an idle state.\nandroidSelectedTabHighlightColor\tColor\t             Gets or sets the color of the horizontal line drawn below the currently selected tab on Android.\niosIconRenderingMode\t            string\t           Gets or sets the icon rendering mode on iOS.\nitems\t                            Array<TabViewItem> Gets or sets the items of the TabView.\nselectedIndex\t                    number\t           Gets or sets the selectedIndex of the TabView.\nselectedTabTextColor\t            Color\t             Gets or sets the text color of the selected tab title.\ntabBackgroundColor\t              Color\t             Gets or sets the background color of the tabs.\ntabTextColor\t                    Color\t             Gets or sets the font size of the tabs titles.\ntabTextFontSize\t                  Color\t             Gets or sets the font size of the tabs titles.\n\nEvents\nNAME\t                DESCRIPTION\nselectedIndexChanged\tEmitted when the selectedIndex property is changed.\nloaded\t              Emitted when the view is loaded.\nunloaded\t            Emitted when the view is unloaded.\nlayoutChanged\t        Emitted when the layout bounds of a view changes due to layout processing.\n-->",
    "description": "The TabView component provides a simple way to navigate between different views by tapping on some of the tabs or by swiping between the views. By default the TabView will load the view of the first tab, however it's possible to load alternative tabs when the app starts by setting the component’s selectedIndex property.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/tab-view"
  },
  "Nativescript UI Component - Tab View Item (default)": {
    "prefix": "ns-tab-view-item",
    "body": "<!-- Important: With version 6 of NativeScript the TabView component is deprecated. Consider using BottomNavigation or Tabs components instead as these components are providing much greater control and functionalities. -->\n<TabViewItem></TabViewItem>",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabviewitem"
  },
  "Nativescript UI Component - Tab View Item (complete)": {
    "prefix": "ns-tab-view-item-comp",
    "body": "<!-- Important: With version 6 of NativeScript the TabView component is deprecated. Consider using BottomNavigation or Tabs components instead as these components are providing much greater control and functionalities. -->\n<TabViewItem\n  title=\"${1:string}\"\n  iconSource=\"${2:string}\">\n</TabViewItem>\n<!--\nProperties\nNAME\t      TYPE\t  DESCRIPTION\ntitle\t      string\tGets or sets the title of the tab strip entry.\niconSource\tstring\tGets or sets the icon source of the tab strip entry. Supports local image paths (~), resource images (res://) and icon fonts (font://)\n-->",
    "description": "Source: https://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabviewitem"
  },
  "Nativescript UI Component - Text Field (default)": {
    "prefix": "ns-text-field",
    "body": "<TextField></TextField>",
    "description": "The TextField component allows you to type text in your app. The TextField has attributes such as secure for handling password fields, and pipes for specifying the text format the control should use.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-field"
  },
  "Nativescript UI Component - Text Field (property)": {
    "prefix": "ns-text-field-prop",
    "body": "<TextField\n  autocapitalizationType=\"${1:(\"none\" | \"words\" | \"sentences\" | \"allcharacters\")}\"\n  autocorrect=\"${2:boolean}\"\n  keyboardType=\"${3:(\"datetime\" | \"phone\" | \"number\" | \"url\" | \"email\" | \"integer\")}\"\n  letterSpacing=\"${4:number}\"\n  lineHeight=\"${5:number}\"\n  maxLength=\"${6:number}\"\n  returnKeyType=\"${7:(\"done\" | \"next\" | \"go\" | \"search\" | \"send\")}\"\n  secure=\"${8:string}\"\n  text=\"${9:string}\"\n  textAlignment=\"${10:(\"center\", \"left\", \"right\")}\"\n  textDecoration=\"${11:(\"lineThrough\", \"none\", \"underline\")}\"\n  textTransform=\"${12:(\"capitalize\", \"lowercase\", \"none\", \"uppercase\")}\"\n  whiteSpace=\"${13:(\"normal\", \"nowrap\")}\">\n</TextField>",
    "description": "The TextField component allows you to type text in your app. The TextField has attributes such as secure for handling password fields, and pipes for specifying the text format the control should use.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-field"
  },
  "Nativescript UI Component - Text Field (complete)": {
    "prefix": "ns-text-field-comp",
    "body": "<TextField\n  autocapitalizationType=\"${1:(\"none\" | \"words\" | \"sentences\" | \"allcharacters\")}\"\n  autocorrect=\"${2:boolean}\"\n  keyboardType=\"${3:(\"datetime\" | \"phone\" | \"number\" | \"url\" | \"email\" | \"integer\")}\"\n  letterSpacing=\"${4:number}\"\n  lineHeight=\"${5:number}\"\n  maxLength=\"${6:number}\"\n  returnKeyType=\"${7:(\"done\" | \"next\" | \"go\" | \"search\" | \"send\")}\"\n  secure=\"${8:string}\"\n  text=\"${9:string}\"\n  textAlignment=\"${10:(\"center\", \"left\", \"right\")}\"\n  textDecoration=\"${11:(\"lineThrough\", \"none\", \"underline\")}\"\n  textTransform=\"${12:(\"capitalize\", \"lowercase\", \"none\", \"uppercase\")}\"\n  whiteSpace=\"${13:(\"normal\", \"nowrap\")}\"\n  (blur)=\"\"\n  (focus)=\"\"\n  (returnPress)=\"\"\n  (textChange)=\"\">\n</TextField>\n<!--\nProperties\nNAME\t                  TYPE\t                  DESCRIPTION\nautocapitalizationType\tAutocapitalizationType\tGets or sets the autocapitalization type.\nautocorrect\t            boolean\t                Enables or disables autocorrection.\nkeyboardType\t          KeyboardType\t          Gets or sets the soft keyboard type\nletterSpacing\t          number\t                Gets or sets letter space style property.\nlineHeight\t            number\t                Gets or sets line height style property.\nmaxLength\t              number\t                Gets or sets the max number of symbols allowed as input.\nreturnKeyType\t          ReturnKeyType\t          Gets or sets the soft keyboard return key flavor.\nsecure\t                string\t                Gets or sets if a text field is for password entry.\ntext\t                  string\t                Gets or sets the text.\ntextAlignment\t          TextAlignment\t          Gets or sets the text alignment.\ntextDecoration          TextDecoration          Gets or sets the text decoration.\ntextTransform\t          TextTransform\t          Gets or sets the text transform.\nwhiteSpace\t            WhiteSpace\t            Gets or sets white space style property.\n\nEvents\nNAME\t      DESCRIPTION\nblur\t      Emitted when the text field is unfocused.\nfocus\t      Emitted when the text field is focused.\nreturnPress\tEmitted when the return key is tapped.\ntextChange\tEmitted when there is a new text input.\n-->",
    "description": "The TextField component allows you to type text in your app. The TextField has attributes such as secure for handling password fields, and pipes for specifying the text format the control should use.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-field"
  },
  "Nativescript UI Component - Text View (default)": {
    "prefix": "ns-text-view",
    "body": "<TextView></TextView>",
    "description": "The TextView component can be used to type larger text content in your app. The component can also be used show any content by setting the editable property to false.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-view"
  },
  "Nativescript UI Component - Text View (property)": {
    "prefix": "ns-text-view-prop",
    "body": "<TextView\n  autocapitalizationType=\"${1:(\"none\" | \"words\" | \"sentences\" | \"allcharacters\")}\"\n  autocorrect=\"${2:boolean}\"\n  keyboardType=\"${3:(\"datetime\" | \"phone\" | \"number\" | \"url\" | \"email\" | \"integer\")}\"\n  letterSpacing=\"${4:number}\"\n  lineHeight=\"${5:number}\"\n  maxLength=\"${6:number}\"\n  returnKeyType=\"${7:(\"done\" | \"next\" | \"go\" | \"search\" | \"send\")}\"\n  secure=\"${8:string}\"\n  text=\"${9:string}\"\n  textAlignment=\"${10:(\"center\", \"left\", \"right\")}\"\n  textDecoration=\"${11:(\"lineThrough\", \"none\", \"underline\")}\"\n  textTransform=\"${12:(\"capitalize\", \"lowercase\", \"none\", \"uppercase\")}\"\n  whiteSpace=\"${13:(\"normal\", \"nowrap\")}\">\n</TextView>",
    "description": "The TextView component can be used to type larger text content in your app. The component can also be used show any content by setting the editable property to false.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-view"
  },
  "Nativescript UI Component - Text View (complete)": {
    "prefix": "ns-text-view-comp",
    "body": "<TextView\n  autocapitalizationType=\"${1:(\"none\" | \"words\" | \"sentences\" | \"allcharacters\")}\"\n  autocorrect=\"${2:boolean}\"\n  keyboardType=\"${3:(\"datetime\" | \"phone\" | \"number\" | \"url\" | \"email\" | \"integer\")}\"\n  letterSpacing=\"${4:number}\"\n  lineHeight=\"${5:number}\"\n  maxLength=\"${6:number}\"\n  returnKeyType=\"${7:(\"done\" | \"next\" | \"go\" | \"search\" | \"send\")}\"\n  secure=\"${8:string}\"\n  text=\"${9:string}\"\n  textAlignment=\"${10:(\"center\", \"left\", \"right\")}\"\n  textDecoration=\"${11:(\"lineThrough\", \"none\", \"underline\")}\"\n  textTransform=\"${12:(\"capitalize\", \"lowercase\", \"none\", \"uppercase\")}\"\n  whiteSpace=\"${13:(\"normal\", \"nowrap\")}\"\n  (blur)=\"\"\n  (focus)=\"\"\n  (textChange)=\"\">\n</TextView>\n<!--\nProperties\nNAME\t                  TYPE\t                  DESCRIPTION\nautocapitalizationType\tAutocapitalizationType\tGets or sets the autocapitalization type.\nautocorrect\t            boolean\t                Enables or disables autocorrection.\nkeyboardType\t          KeyboardType\t          Gets or sets the soft keyboard type\nletterSpacing\t          number\t                Gets or sets letter space style property.\nlineHeight\t            number\t                Gets or sets line height style property.\nmaxLength\t              number\t                Gets or sets the max number of symbols allowed as input.\nreturnKeyType\t          ReturnKeyType\t          Gets or sets the soft keyboard return key flavor.\nsecure\t                string\t                Gets or sets if a text field is for password entry.\ntext\t                  string\t                Gets or sets the text.\ntextAlignment\t          TextAlignment\t          Gets or sets the text alignment.\ntextDecoration          TextDecoration          Gets or sets the text decoration.\ntextTransform\t          TextTransform\t          Gets or sets the text transform.\nwhiteSpace\t            WhiteSpace\t            Gets or sets white space style property.\n\nEvents\nNAME\t      DESCRIPTION\nblur\t      Emitted when the text field is unfocused.\nfocus\t      Emitted when the text field is focused.\ntextChange\tEmitted when there is a new text input.\n-->",
    "description": "The TextView component can be used to type larger text content in your app. The component can also be used show any content by setting the editable property to false.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/text-view"
  },
  "Nativescript UI Component - Time Picker (default)": {
    "prefix": "ns-time-picker",
    "body": "<TimePicker></TimePicker>",
    "description": "NativeScript provides a TimePicker control that enables users to choose a time as a ready-to-use dialog. Every time part can be picked separately by its corresponding section of the control - for hour, minutes and AM/PM.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/time-picker"
  },
  "Nativescript UI Component - Time Picker (property)": {
    "prefix": "ns-time-picker-prop",
    "body": "<TimePicker\n  hour=\"${1:number}\"\n  maxHour=\"${2:number}\"\n  maxMinute=\"${3:number}\"\n  minHour=\"${4:number}\"\n  minMinute=\"${5:number}\"\n  minute=\"${6:number}\"\n  minuteInterval=\"${7:number}\"\n  time=\"${8:Date}\">\n</TimePicker>",
    "description": "NativeScript provides a TimePicker control that enables users to choose a time as a ready-to-use dialog. Every time part can be picked separately by its corresponding section of the control - for hour, minutes and AM/PM.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/time-picker"
  },
  "Nativescript UI Component - Time Picker (complete)": {
    "prefix": "ns-time-picker-comp",
    "body": "<TimePicker\n  hour=\"${1:number}\"\n  maxHour=\"${2:number}\"\n  maxMinute=\"${3:number}\"\n  minHour=\"${4:number}\"\n  minMinute=\"${5:number}\"\n  minute=\"${6:number}\"\n  minuteInterval=\"${7:number}\"\n  time=\"${8:Date}\"\n  (hourChange)=\"\"\n  (minuteChange)=\"\"\n  (timeChange)=\"\">\n</TimePicker>\n<!--\nProperties\nNAME\t          TYPE\t  DESCRIPTION\nhour\t          number\tGets or sets the time hour.\nmaxHour\t        number\tGets or sets the max time hour.\nmaxMinute\t      number\tGets or sets the max time minute.\nminHour\t        number\tGets or sets the min time hour.\nminMinute\t      number\tGets or sets the min time minute.\nminute\t        number\tGets or sets the time minute.\nminuteInterval\tnumber\tGets or sets the time hour\ntime\t          Date\t  Gets or sets the time while passing a Date object (use it instaed hour and minute).\n\nEvents\nNAME\t       DESCRIPTION\nhourChange\t Emitted when the hour property is changed.\nminuteChange Emitted when the minute property is changed.\ntimeChange\t Emitted when the hour, minute or time property is changed.\n-->",
    "description": "NativeScript provides a TimePicker control that enables users to choose a time as a ready-to-use dialog. Every time part can be picked separately by its corresponding section of the control - for hour, minutes and AM/PM.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/time-picker"
  },
  "Nativescript UI Component - Web View (default)": {
    "prefix": "ns-web-view",
    "body": "<WebView></WebView>",
    "description": "The WebView component is used to display web content within your application. You use the control by providing a src attribute that accepts a URL,a path to a local HTML file or directly HTML string.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/web-view"
  },
  "Nativescript UI Component - Web View (property)": {
    "prefix": "ns-web-view-prop",
    "body": "<WebView src=\"${1:string}\"></WebView>",
    "description": "The WebView component is used to display web content within your application. You use the control by providing a src attribute that accepts a URL,a path to a local HTML file or directly HTML string.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/web-view"
  },
  "Nativescript UI Component - Web View (complete)": {
    "prefix": "ns-web-view-comp",
    "body": "<WebView\n  src=\"${1:string}\"\n  (loadStarted)=\"\"\n  (loadFinished)=\"\">\n</WebView>\n<!--\nProperties\nNAME\tTYPE\t  DESCRIPTION\nsrc\t  string\tGets or sets the url, local file path or HTML string.\n\nEvents\nNAME\t        DESCRIPTION\nloadStarted\t  Emitted when the content is starting to load.\nloadFinished\tEmitted when the content loading is over.\n-->",
    "description": "The WebView component is used to display web content within your application. You use the control by providing a src attribute that accepts a URL,a path to a local HTML file or directly HTML string.\n\nSource: https://docs.nativescript.org/angular/ui/ng-components/web-view"
  }
}
